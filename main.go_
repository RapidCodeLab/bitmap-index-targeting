package main

import (
	"log"
	"time"

	"github.com/RoaringBitmap/roaring"
)

var (
	EnCountryCode    = 1
	MobileDeviceCode = 1
	WindowsOSCode    = 1
)

type targets struct {
	country map[int]*roaring.Bitmap
	device  map[int]*roaring.Bitmap
	os      map[int]*roaring.Bitmap
}

func main() {
	log.Println("Launched: ", time.Now().Format("2006-01-02 15:04:05"))
	targets := targets{}
	targets.country = make(map[int]*roaring.Bitmap)
	targets.device = make(map[int]*roaring.Bitmap)
	targets.os = make(map[int]*roaring.Bitmap)

	targets.country[EnCountryCode] = roaring.BitmapOf()
	for i := 1; i < 10000; i++ {
		targets.country[EnCountryCode].Add(uint32(i))
		if i%2 == 0 {
			targets.country[EnCountryCode].Remove(uint32(i))
		}
	}

	log.Println("Stats: ", targets.country[EnCountryCode].Stats())

	// log.Println("En: ", len(targets.country[EnCountryCode].ToArray()))
	log.Println("Size: ", targets.country[EnCountryCode].GetSizeInBytes(), "bytes")

	targets.device[MobileDeviceCode] = roaring.BitmapOf(12, 9691)
	log.Println("Mobile: ", targets.device[MobileDeviceCode].ToArray())
	log.Println("Size: ", targets.device[MobileDeviceCode].GetSizeInBytes(), "bytes")

	targets.os[WindowsOSCode] = roaring.BitmapOf(12, 9691)

	result := targets.country[EnCountryCode]

	result.AndAny(
		targets.device[MobileDeviceCode],
		targets.os[WindowsOSCode],
	)

	log.Println("Country en and device mobile: ", result.ToArray())
}
